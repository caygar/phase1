/**
 * Contributors: Kavin, Cumhur Aygar
 * Course: CSC 452 
 * Assignment: Phase 4a
 * Overview: Contains the implementation of phase 4 system calls, specifically
 * for handling sleep functionality and terminal I/O operations such as reading and writing.
 */

#include <phase1.h>
#include <phase2.h>
#include <phase3.h>
#include <phase4.h>
#include <phase4_usermode.h>
#include <usloss.h>
#include <usyscall.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>

#define FREE 0
#define SLEEPING 1
#define READY 2

// CLOCK DEVICE
// Defines the structure for sleep requests
typedef struct SleepRequest SleepRequest;
typedef struct SleepRequest {
    int seconds;
    int mbox;
    int status;
    SleepRequest* next;
};

// List of sleep requests awaiting execution
SleepRequest* sleepRequestQueue;
// Fixed array to manage sleep request data
SleepRequest sleepRequestsTable[MAXPROC];

// Sleep request handler functions
void sleep(USLOSS_Sysargs *args);
int sleepMain(char *args);

// TERMINAL DEVICE
// Arrays to manage terminal states and buffers
int termWriteMutex[USLOSS_TERM_UNITS];
int termToWrite[USLOSS_TERM_UNITS];
int termReadMbox[USLOSS_TERM_UNITS];
int termLineIndex[USLOSS_TERM_UNITS];
char termLines[USLOSS_TERM_UNITS][MAXLINE+1];

// Terminal input/output system calls
void termWrite(USLOSS_Sysargs *args);
void termRead(USLOSS_Sysargs *args);
int termMain(char *args);

/**
 * @brief Sets up the system call handlers for sleep and terminal operations, 
 * and initializes relevant data structures for clock and terminal devices.
 */
void phase4_init(void) {
    // Configure the system call vector
    systemCallVec[SYS_SLEEP] = sleep;
    systemCallVec[SYS_TERMREAD]  = termRead;
    systemCallVec[SYS_TERMWRITE] = termWrite;

    // Prepare the sleep request table
    for (int i = 0; i < MAXPROC; i++) {
        sleepRequestsTable[i].status = FREE;
        sleepRequestsTable[i].next = NULL;
        sleepRequestsTable[i].mbox = -1;
    }
    sleepRequestQueue = NULL;

    // Set up terminal arrays and device configurations
    memset(termLines, '\0', sizeof(termLines));
    memset(termLineIndex, 0, sizeof(termLineIndex));
    for (int i = 0; i < USLOSS_TERM_UNITS; i++) {
        USLOSS_DeviceOutput(USLOSS_TERM_DEV, i, (void*)(long)0x2);
        termReadMbox[i] = MboxCreate(10, MAXLINE);
        termToWrite[i] = MboxCreate(1, 0);
        termWriteMutex[i] = MboxCreate(1, 0);
    }
}

/**
 * @brief Launches daemon processes for sleep management and terminal operations.
 */
void phase4_start_service_processes(void) {
    // Start the sleep management process
    int sleepServicePid = spork("sleepMain", sleepMain, NULL, USLOSS_MIN_STACK, 2);

    // Start the terminal management processes
    for (int i = 0; i < USLOSS_TERM_UNITS; i++) {
        char name[128];
        sprintf(name, "termMain%d", i);
        char unit[10];
        sprintf(unit, "%d", i);
        int termPID = spork(name, termMain, unit, USLOSS_MIN_STACK, 2);
    }
}

/**
 * @brief Implements the sleep system call, pausing the process for a specified duration.
 * 
 * @param args: Contains the duration of sleep (in seconds) as input.
 */
void sleep(USLOSS_Sysargs *args) {
    // Retrieve the sleep duration
    int seconds = (long) args->arg1;

    // Validate the input
    if (seconds < 0) {
        args->arg4 = (void *) -1;
        return;
    }

    // Identify an available slot in the sleep table
    int sleepIndex = -1;
    for (int i = 0; i < MAXPROC; i++) {
        if (sleepRequestsTable[i].status == FREE) {
            sleepIndex = i;
            break;
        }
    }

    // Populate the sleep request entry
    SleepRequest* request = &sleepRequestsTable[sleepIndex];
    request->seconds = currentTime() + seconds * 1000000;
    request->mbox = MboxCreate(1, 0);
    request->status = SLEEPING;

    // Add the entry to the sleep queue
    SleepRequest* rest = sleepRequestQueue;
    request->next = rest;
    sleepRequestQueue = request;

    // Wait for the sleep to complete
    MboxRecv(request->mbox, NULL, 0);

    args->arg4 = (void *) 0;
}

/**
 * @brief Monitors the sleep queue and wakes up processes when their sleep time ends.
 * 
 * @param args: Optional arguments for the sleep management process.
 * @return int: Always returns 0 after execution.
 */
int sleepMain(char* args) {
    int status;
    while (1) {
        // Wait for clock interrupt
        waitDevice(USLOSS_CLOCK_DEV, 0, &status);

        // Check the sleep request queue for wake-up conditions
        SleepRequest* cur = sleepRequestQueue;
        while (cur != NULL) {
            if (cur->status == SLEEPING && currentTime() > cur->seconds) {
                cur->status = READY;
                MboxSend(cur->mbox, NULL, 0);
            }
            cur = cur->next;
        }
    }
    return 0;
}

/**
 * @brief Manages the terminal write operation, sending characters to a terminal device.
 * 
 * @param args: Includes the buffer, size of data, and terminal unit to write to.
 */
void termWrite(USLOSS_Sysargs *args) {
    char *buffer = (char *) args->arg1;
    int bufferSize = (int) args->arg2;
    int unit = (int) args->arg3;

    // Validate the input arguments
    if (buffer == NULL || bufferSize <= 0 || unit < 0 || unit >= USLOSS_TERM_UNITS) {
        args->arg4 = (void *) -1;
        return;
    }

    // Acquire the mutex for write access
    MboxSend(termWriteMutex[unit], NULL, 0);

    for (int i = 0; i < bufferSize; i++) {
        // Wait until the terminal is ready for output
        MboxRecv(termToWrite[unit], NULL, 0);

        int cr_val = 0x1;
        cr_val |= 0x2;
        cr_val |= 0x4;
        cr_val |= (buffer[i] << 8);

        USLOSS_DeviceOutput(USLOSS_TERM_DEV, unit, (void*)(long) cr_val);
    }

    args->arg4 = (void *) 0;
    args->arg2 = (void *) bufferSize;

    // Release the mutex
    MboxRecv(termWriteMutex[unit], NULL, 0);
}

/**
 * @brief Handles reading from a terminal device and storing input in a buffer.
 * 
 * @param args: Includes the buffer, size of the buffer, and terminal unit to read from.
 */
void termRead(USLOSS_Sysargs *args) {
    char *buffer = (char *) args->arg1;
    int bufferSize = (int) args->arg2;
    int unit = (int) args->arg3;

    // Validate input parameters
    if (buffer == NULL || bufferSize <= 0 || unit < 0 || unit >= USLOSS_TERM_UNITS) {
        args->arg4 = (void *) -1;
        return;
    }

    char line[MAXLINE+1];

    // Wait for a complete line to be received
    int len = MboxRecv(termReadMbox[unit], &line, MAXLINE+1);

    if (len > bufferSize) {
        len = bufferSize;
    }

    strncpy(buffer, line, len);

    args->arg4 = (void *) 0;
    args->arg2 = (void *) len;
}

/**
 * @brief Executes terminal operations, including writing and receiving data, for a specific unit.
 * 
 * @param args: The terminal unit identifier provided as a string.
 * @return int: Always returns 0 on completion.
 */
int termMain(char *args) {
    int status;
    int unit = atoi(args);

    while (1) {
        // Await terminal device activity
        waitDevice(USLOSS_TERM_DEV, unit, &status);

        int recv = USLOSS_TERM_STAT_RECV(status);
        int xmit = USLOSS_TERM_STAT_XMIT(status);

        if (xmit == USLOSS_DEV_READY) {
            // Signal readiness for writing
            MboxCondSend(termToWrite[unit], NULL, 0);
        } else if (xmit == USLOSS_DEV_ERROR) {
            USLOSS_Console("USLOSS_DEV_ERROR. Halting...\n");
            USLOSS_Halt(1);
        }

        if (recv == USLOSS_DEV_BUSY) {
            // Process incoming character
            char character = USLOSS_TERM_STAT_CHAR(status);

            // Add character to the terminal's line buffer if space allows
            if (termLineIndex[unit] < MAXLINE) {
                termLines[unit][termLineIndex[unit]] = character;
                termLineIndex[unit]++;
            }

            // Check if the character signals the end of a line
            if (character == '\n') {
                // Send the completed line to the mailbox
                MboxCondSend(termReadMbox[unit], termLines[unit], termLineIndex[unit]);
                memset(termLines[unit], '\0', sizeof(termLines[unit]));
                termLineIndex[unit] = 0;
            }

            // Handle cases where the line buffer is full
            if (termLineIndex[unit] == MAXLINE) {
                MboxCondSend(termReadMbox[unit], termLines[unit], termLineIndex[unit]);
                memset(termLines[unit], '\0', sizeof(termLines[unit]));
                termLineIndex[unit] = 0;

                // Start a new line with the current character
                termLines[unit][termLineIndex[unit]] = character;
                termLineIndex[unit]++;
            }

        } else if (recv == USLOSS_DEV_ERROR) {
            // Log an error and halt the system for this terminal unit
            USLOSS_Console("An error occurred on terminal unit %d\n", unit);
            USLOSS_Halt(1);
        }
    }

    return 0;
}

